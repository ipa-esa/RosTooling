/*
 * generated by Xtext 2.17.0
 */
package de.fraunhofer.ipa.componentInterface.tests

import com.google.inject.Inject
import componentInterface.ComponentInterface
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import java.nio.file.Files
import java.nio.file.Paths

@RunWith(XtextRunner)
@InjectWith(CustomInjectorProvider)
class ComponentInterfaceParsingTest {
	@Inject
	ParseHelper<ComponentInterface> parseHelper
	String RESOURCES_BASE_DIR = 'resources'

	@Test
	def void loadModel() {
		val fileContent = new String(Files.readAllBytes(Paths.get(RESOURCES_BASE_DIR, 'test.componentinterface')))
		val result = parseHelper.parse(fileContent)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}

	@Test 
    def void parseDomainmodel() {
    	val fileContent = new String(Files.readAllBytes(Paths.get(RESOURCES_BASE_DIR, 'test.componentinterface')))
		val model = parseHelper.parse(fileContent)
        val ComponentName = model.name
        Assert.assertEquals(ComponentName, "test_component")        
    }

}
