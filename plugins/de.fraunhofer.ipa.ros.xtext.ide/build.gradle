plugins {
    id 'application'
}

dependencies {
    api project(':de.fraunhofer.ipa.ros.xtext')
    api "org.eclipse.xtext:org.eclipse.xtext.ide:${xtextVersion}"
    implementation project(':de.fraunhofer.ipa.ros.xtext')
}

application {
    mainClass = 'de.fraunhofer.ipa.ros.ide.launch.ServerLauncher'
    startScripts {
        applicationName = 'ros-lsp-socket'
    }
}

sourceSets {
    main {
        java {
            srcDirs += ['src-gen', 'xtend-gen']
        }
    }
}

// Add another start script for the standalone / self-contained case
task standaloneStartScript(type: CreateStartScripts) {
    mainClass = 'org.eclipse.xtext.ide.server.ServerLauncher'
    applicationName = 'ros-lsp-standalone'
    classpath = tasks.startScripts.classpath
    outputDir = tasks.startScripts.outputDir
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    manifest {
        attributes(
            'Main-Class': 'de.fraunhofer.ipa.ros.ide.launch.ServerLauncher'
        )
    }
}

// Ensure standaloneStartScript runs before startScripts
tasks.startScripts.configure {
    dependsOn tasks.standaloneStartScript
}

// --- FIX: Ensure generated sources are included and built before Java compilation ---
tasks.named('compileJava') {
    dependsOn ':de.fraunhofer.ipa.ros.xtext:generateXtextLanguage'
}